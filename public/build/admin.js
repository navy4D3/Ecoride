"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["admin"],{

/***/ "./assets/js/admin.js":
/*!****************************!*\
  !*** ./assets/js/admin.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../app */ "./assets/app.js");

var prochainTrajeTChart = document.getElementById('prochains-trajet-chart');
if (prochainTrajeTChart) {
  var fetchData = function fetchData(days) {
    fetch("/admin/stats?days=".concat(days)).then(function (response) {
      return response.json();
    }).then(function (data) {
      var labels = data.trajetsAVenir.map(function (d) {
        return d.date;
      });
      var counts = data.trajetsAVenir.map(function (d) {
        return d.count;
      });
      var labelsCredits = data.creditsAVenir.map(function (d) {
        return d.date;
      });
      var countsCredits = data.creditsAVenir.map(function (d) {
        return d.count;
      });
      var greenBlackColor = '#386150';
      var greenMediumColor = '#EAFFF3';
      var blueBtnColor = '#37abc7';
      var greenBtnColor = '#58fea0';
      if (rideChart) {
        rideChart.data.labels = labels;
        rideChart.data.datasets[0].data = counts;
        rideChart.update();
        creditsChart.data.labels = labelsCredits;
        creditsChart.data.datasets[0].data = countsCredits;
        creditsChart.update();
      } else {
        var chartOptions = {
          plugins: {
            legend: {
              display: true,
              labels: {
                color: greenBlackColor,
                // ✅ Couleur du label dans la légende
                font: {
                  family: 'Josefin sans',
                  size: 18
                }
              }
            }
          },
          scales: {
            x: {
              ticks: {
                color: greenBlackColor,
                // Couleur du texte
                font: {
                  family: 'Nunito',
                  // Police (ou Google Fonts, ex: 'Poppins')
                  size: 14,
                  weight: 'bold'
                }
              },
              grid: {
                drawOnChartArea: true,
                // 👈 n'affiche pas les lignes verticales internes
                drawTicks: true,
                color: greenBlackColor,
                // Couleur de l’axe X
                borderColor: greenBlackColor,
                tickWidth: 1,
                lineWidth: function lineWidth(ctx) {
                  // Ne dessiner que le premier trait
                  return ctx.index === 0 ? 1 : 0;
                } // Épaisseur du trait X
              }
            },
            y: {
              beginAtZero: true,
              ticks: {
                stepSize: 1,
                // 👈 Forcer un pas de 1
                callback: function callback(value) {
                  if (Number.isInteger(value)) {
                    return value;
                  }
                },
                color: greenBlackColor,
                // Couleur du texte
                font: {
                  family: 'Nunito',
                  // Police (ou Google Fonts, ex: 'Poppins')
                  size: 14,
                  weight: 'bold'
                }
              },
              grid: {
                drawOnChartArea: true,
                // 👈 n'affiche pas les lignes verticales internes
                drawBorder: false,
                // 👈 garde l’axe Y
                drawTicks: true,
                display: true,
                color: greenBlackColor,
                // Couleur de l’axe X
                tickWidth: 1,
                lineWidth: function lineWidth(ctx) {
                  // Ne dessiner que le premier trait
                  return ctx.index === 0 ? 1 : 0;
                }
              }
            }
          }
        };
        rideChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'Nombre de trajet',
              data: counts,
              // backgroundColor: blueBtnColor,
              // borderColor: 'transparent',
              backgroundColor: greenBtnColor,
              borderColor: 'transparent',
              borderWidth: 2,
              borderRadius: 6
            }]
          },
          options: chartOptions
        });
        creditsChart = new Chart(ctx2, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              data: countsCredits,
              label: 'Nombre de credits',
              backgroundColor: blueBtnColor,
              borderColor: 'transparent',
              borderWidth: 2,
              borderRadius: 6
            }]
          },
          options: chartOptions
        });
      }
    });
  };
  var adjustCanvasHeight = function adjustCanvasHeight() {
    var isSmallScreen = window.innerWidth < 512;
    var canvases = [document.getElementById('prochains-trajet-chart'), document.getElementById('credits-a-venir-chart')];
    canvases.forEach(function (canvas) {
      if (canvas) {
        canvas.height = isSmallScreen ? 300 : 300; // 📏 ajuste comme tu veux
      }
    });
  }; // Exécuter au chargement
  var ctx = document.getElementById('prochains-trajet-chart').getContext('2d');
  var ctx2 = document.getElementById('credits-a-venir-chart').getContext('2d');
  var rideChart;
  var creditsChart;
  document.getElementById('period-select').addEventListener('change', function (e) {
    fetchData(e.target.value);
  });

  // Initial load
  fetchData(7);
  adjustCanvasHeight();

  // Exécuter au redimensionnement
  window.addEventListener('resize', adjustCanvasHeight);
}
var searchInput = document.getElementById('search-input');

// Recherche en direct
if (searchInput) {
  var searchBtn = document.getElementById('search-btn');
  var form = document.getElementById('search-form');
  var usersTable = document.getElementById('users-table');
  searchInput.addEventListener('input', function () {
    var query = new URLSearchParams(new FormData(form)).toString();
    fetch("/admin/users-list?" + query, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    }).then(function (res) {
      return res.text();
    }).then(function (html) {
      usersTable.innerHTML = html;
    });
  });

  // Pagination AJAX
  usersTable.addEventListener('click', function (e) {
    if (e.target.tagName === 'A' && e.target.closest('.pagination')) {
      e.preventDefault();
      fetch(e.target.href, {
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      }).then(function (res) {
        return res.text();
      }).then(function (html) {
        usersTable.innerHTML = html;
      });
    }
  });
  usersTable.addEventListener('click', function (e) {
    var row = e.target.closest('.clickable-row');
    if (row && row.dataset.href) {
      window.location.href = row.dataset.href;
    }
  });
}
var adminEditUserForm = document.getElementById('admin-edit-user-form');
if (adminEditUserForm) {
  var inputs = adminEditUserForm.querySelectorAll('input, select, textarea');
  var editBtn = document.getElementById('admin-edit-user-btn');
  inputs.forEach(function (input) {
    input.addEventListener('input', function () {
      editBtn.classList.remove('inactive');
    });
  });
  editBtn.addEventListener('click', function (e) {
    e.preventDefault();
    var formData = new FormData(adminEditUserForm);
    var urlParams = new URLSearchParams(window.location.search);
    var id = urlParams.get('id');
    fetch('/admin/user?id=' + id, {
      method: 'POST',
      body: formData,
      headers: {
        'X-Requested-With': 'XMLHttpRequest' // important pour indiquer une requête AJAX
      }
    }).then(function (response) {
      if (!response.ok) {
        throw new Error('Erreur réseau');
      }
      return response.json();
    }).then(function (data) {
      // data.html contient ton formulaire rendu

      (0,_app__WEBPACK_IMPORTED_MODULE_0__.treatFormAlert)(adminEditUserForm, 'Informations mises à jour avec succès', data);
      if (data.status !== "success") {
        adminEditUserForm.reset();
      }
      // const event = new Event('input', {
      //     bubbles: true,
      // });

      // passwordInput.dispatchEvent(event);
    })["catch"](function (error) {
      return console.error('Erreur:', error);
    });
  });
  var resetProfilPictureBtn = document.getElementById('reset-user-photo-profil-btn');
  if (resetProfilPictureBtn) {
    var profilPictureImg = document.getElementById('profil-picture-img');
    resetProfilPictureBtn.addEventListener('click', function (e) {
      profilPictureImg.src = '/default-profil-picture.png';
      e.preventDefault();
      var formData = new FormData(adminEditUserForm);
      var urlParams = new URLSearchParams(window.location.search);
      var id = urlParams.get('id');
      fetch('/user/reset-photo-profil?id=' + id, {
        method: 'POST',
        body: formData,
        headers: {
          'X-Requested-With': 'XMLHttpRequest' // important pour indiquer une requête AJAX
        }
      }).then(function (response) {
        if (!response.ok) {
          throw new Error('Erreur réseau');
        }
        return response.json();
      }).then(function (data) {
        // data.html contient ton formulaire rendu

        (0,_app__WEBPACK_IMPORTED_MODULE_0__.treatFormAlert)(adminEditUserForm, 'Photo de profil réinitialisé.', data);
        if (data.status !== "success") {
          adminEditUserForm.reset();
          profilPictureImg.src = '/default-profil-picture.png';
        }
        resetProfilPictureBtn.remove();
        // const event = new Event('input', {
        //     bubbles: true,
        // });

        // passwordInput.dispatchEvent(event);
      })["catch"](function (error) {
        return console.error('Erreur:', error);
      });
    });
  }
  var deleteUserBtn = document.getElementById('delete-user-btn');
  var deleteUserPopup = document.getElementById('delete-user-popup');
  deleteUserBtn.addEventListener('click', function (e) {
    (0,_app__WEBPACK_IMPORTED_MODULE_0__.showPopup)(deleteUserPopup, 'flex');
  });
  var hideDeleteUserPopupBtn = deleteUserPopup.querySelector('.back');
  hideDeleteUserPopupBtn.addEventListener('click', function () {
    (0,_app__WEBPACK_IMPORTED_MODULE_0__.hidePopup)(deleteUserPopup);
  });
}
var adminAddEmployeForm = document.getElementById('admin-add-employe-form');
if (adminAddEmployeForm) {
  var adminAddEmployeFormInputs = adminAddEmployeForm.querySelectorAll('input');
  adminAddEmployeFormInputs.forEach(function (input) {
    input.addEventListener('input', function () {
      (0,_app__WEBPACK_IMPORTED_MODULE_0__.checkInputs)(adminAddEmployeForm);
    });
  });
}

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["assets_styles_app_scss","assets_app_js"], () => (__webpack_exec__("./assets/js/admin.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,