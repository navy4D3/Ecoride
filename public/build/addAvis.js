"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["addAvis"],{

/***/ "./assets/js/addAvis.js":
/*!******************************!*\
  !*** ./assets/js/addAvis.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../app */ "./assets/app.js");

var isPositiveTrueBtn = document.getElementById('is-positive-true-btn');
var isPositiveFalseBtn = document.getElementById('is-positive-false-btn');
var isPositiveInput = document.getElementById('avis_isPositive');
isPositiveTrueBtn.addEventListener('click', function () {
  isPositiveInput.value = 1;
  this.classList.add('btn-green');
  this.classList.remove('btn-outline');
  isPositiveFalseBtn.classList.add('btn-outline');
  isPositiveFalseBtn.classList.remove('btn-green');
  var event = new Event("input", {
    bubbles: true
  });
  isPositiveInput.dispatchEvent(event);
});
isPositiveFalseBtn.addEventListener('click', function () {
  isPositiveInput.value = 0;
  this.classList.add('btn-green');
  this.classList.remove('btn-outline');
  isPositiveTrueBtn.classList.add('btn-outline');
  isPositiveTrueBtn.classList.remove('btn-green');
  var event = new Event("input", {
    bubbles: true
  });
  isPositiveInput.dispatchEvent(event);
});
var starBtns = document.querySelectorAll(".star");
var noteInput = document.getElementById('avis_note');
var commentaireInput = document.getElementById('avis_commentaire');
starBtns.forEach(function (btn) {
  btn.addEventListener('click', function () {
    noteInput.value = btn.id;
    var noteIndex = btn.id;
    var event = new Event("input", {
      bubbles: true
    });
    noteInput.dispatchEvent(event);
    for (var i = parseInt(noteIndex) + 1; i < 6; i++) {
      document.getElementById(i).querySelector('.outline').style.display = "block";
      document.getElementById(i).querySelector('.fill').style.display = "none";
    }
    while (noteIndex > 0) {
      document.getElementById(noteIndex).querySelector('.outline').style.display = "none";
      document.getElementById(noteIndex).querySelector('.fill').style.display = "block";
      // toggleDisplay(document.getElementById(noteIndex).querySelector('.fill'));
      noteIndex -= 1;
    }
  });
});
var addAvisForm = document.querySelector('form');
var addAvisFormInputs = addAvisForm.querySelectorAll('input, textarea, select');
var addAvisFormSubmitBtn = addAvisForm.querySelector('.submit-btn');
addAvisFormInputs.forEach(function (input) {
  input.addEventListener('input', function () {
    (0,_app__WEBPACK_IMPORTED_MODULE_0__.checkInputs)(addAvisForm);
    if (isPositiveInput.value == 0 && commentaireInput.value == "") {
      addAvisFormSubmitBtn.classList.add('inactive');
    }
    if (isPositiveInput.value && commentaireInput.value && noteInput.value) {
      addAvisFormSubmitBtn.classList.remove('inactive');
    }
  });
});

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["assets_styles_app_scss","assets_app_js"], () => (__webpack_exec__("./assets/js/addAvis.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,